LZW 压缩算法性能总结
====================

文件压缩结果:

| 文件名              | 原始大小 (字节) | 压缩后大小 (字节) | 压缩率 (%) |
|-------------------|--------------|--------------|----------|
| repetitive_1KB.txt  | 1,024        | 345          | 66.31    |
| repetitive_10KB.txt | 10,240       | 2,350        | 77.05    |
| repetitive_100KB.txt| 102,400      | 9,619        | 90.61    |
| repetitive_1MB.txt  | 1,048,576    | 35,677       | 96.60    |

与其他压缩算法比较:

1KB 文件压缩比较:
| 压缩方法 | 压缩后大小 (字节) | 压缩率 (%) |
|---------|--------------|----------|
| LZW     | 345          | 66.31    |
| ZIP     | 250          | 75.59    |
| 7z      | 229          | 77.64    |
| GZIP    | 120          | 88.28    |
| BZIP2   | 138          | 86.52    |

100KB 文件压缩比较:
| 压缩方法 | 压缩后大小 (字节) | 压缩率 (%) |
|---------|--------------|----------|
| LZW     | 9,619        | 90.61    |
| ZIP     | 1,772        | 98.27    |
| 7z      | 1,602        | 98.44    |
| GZIP    | 1,460        | 98.57    |
| BZIP2   | 1,155        | 98.87    |

压缩算法特点:
1. 对于重复性高的数据，压缩效率非常高
2. 随着文件大小增加，压缩率显著提高
3. 使用自适应位宽编码（9-16位）和动态字典重置机制
4. 通过监控压缩效率决定是否重置字典

优化特性:
- 初始位宽为9位，最大支持到16位（65536个编码）
- 使用哈希表实现字典查找，提高效率
- 当压缩效率下降时会自动重置字典
- 记录字符使用频率和局部压缩率

分析结论:
- LZW算法对于重复性高的数据压缩效果很好，但相比现代压缩算法（如GZIP、BZIP2、7z）仍有差距
- LZW算法的优势在于其相对简单的实现和较低的计算复杂度
- 随着文件大小增加，LZW算法的压缩率显著提高，但仍低于专业压缩算法
- LZW算法在小文件上表现相对较好，大文件上与专业压缩算法的差距更明显

详细的压缩过程和统计信息已保存在 compression_output.txt 文件中。 